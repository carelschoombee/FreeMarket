@using FreeMarket.Models
@model SaveCartViewModel

@{
    ViewBag.Title = "Secure Checkout - Delivery Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="@Url.Content("~/Content/bootstrap-datetimepicker.min.css")" rel="stylesheet" type="text/css" />

<style type="text/css">
    /* Override feedback icon position */
    .form-horizontal .has-feedback .input-group .form-control-feedback {
        top: 0;
        right: -40px;
    }
</style>

<h2 class="text-center"><span class="glyphicon glyphicon-lock"></span>@ViewBag.Title</h2>
<hr />

 <div id="parent" class="container center_div well well-modal">

    @using (Html.BeginForm("UpdateDeliveryDetails", "ShoppingCart", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "saveForm" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            @Html.ValidationSummary(true)

            <div class="form-group">
                <label class="col-sm-4 control-label">Preferred Delivery Time</label>
                <div class="col-sm-6">
                    <div class="input-group date" id="datetimePicker">
                        @{ Html.EnableClientValidation(false); }
                        @Html.EditorFor(m => m.prefDeliveryDateTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(m => m.prefDeliveryDateTime)
                        @{ Html.EnableClientValidation(true); }
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                    <span id="temp">Example: 18/03/2024 12:00</span>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.SelectedAddress, new { @class = "col-md-4 control-label" })
                <div class="col-md-6">
                    @Html.DropDownListFor(model => model.SelectedAddress, Model.AddressNameOptions, new { @class = "form-control" })
                </div>
            </div>

            <div id="AddressContainer">
                @Html.Partial("_CartModifyDeliveryDetails", Model)
            </div>

            <div class="center_div">
                <span class="icon-input-btn"><span class="glyphicon glyphicon-arrow-right"></span> <input type="submit" value="Next" class="btn btn-success btn-sm" /></span>
                <span class="icon-input-btn"><span class="glyphicon glyphicon-shopping-cart"></span> <a class="btn btn-primary btn-sm" href="@Url.Action("Cart", "ShoppingCart")">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Back to Cart</a></span>
            </div>

        </div>  
    }

</div>

<script type="text/javascript">

    $(document).ready(function () {
        $(".icon-input-btn").each(function () {
            var btnFont = $(this).find(".btn").css("font-size");
            var btnColor = $(this).find(".btn").css("color");
            $(this).find(".glyphicon").css("font-size", btnFont);
            $(this).find(".glyphicon").css("color", btnColor);
            if ($(this).find(".btn-xs").length) {
                $(this).find(".glyphicon").css("top", "24%");
            }
        });
    });

    $('#datetimePicker').datetimepicker({
        format: 'DD/MM/YYYY HH:mm',
        daysOfWeekDisabled: [0, 6],
        minDate: moment().add(1, 'days'),
        maxDate: moment().add(30, 'days'),
        widgetPositioning: {
        horizontal: 'auto',
        vertical: 'bottom'
        }
    }
    );

    $('#datetimePicker')
    .on('dp.change dp.show', function (e) {
        // Validate the date when user change it
        $('#saveForm')
            // Get the bootstrapValidator instance
            .data('bootstrapValidator')
            // Mark the field as not validated, so it'll be re-validated when the user change date
            .updateStatus('prefDeliveryDateTime', 'NOT_VALIDATED', null)
            // Validate the field
            .validateField('prefDeliveryDateTime');
    });

    $(document).ready(function () {
        $('#saveForm')
            .bootstrapValidator({
                feedbackIcons: {
                    valid: 'glyphicon glyphicon-ok',
                    invalid: 'glyphicon glyphicon-remove',
                    validating: 'glyphicon glyphicon-refresh'
                },
                fields: {
                    prefDeliveryDateTime: {
                        validators: {
                            notEmpty: {
                                message: 'Please select a date and time'
                            },
                            date: {
                                format: 'DD/MM/YYYY HH:mm',
                                message: 'The value is not a valid date'

                            },
                            callback: {
                                message: 'Please choose a date in the near future during office hours (08:00 to 17:00)',
                                callback: function (value, validator) {
                                    var m = new moment(value, 'DD/MM/YYYY HH:mm', true);
                                    var hb = new moment(value, 'DD/MM/YYYY HH:mm', true).hour(7);
                                    var ha = new moment(value, 'DD/MM/YYYY HH:mm', true).hour(17);
                                    if (!m.isValid()) {
                                        return false;
                                    }
                                    // Check if the date in our range
                                    return m.isAfter(moment().add(23, 'hours')) && m.isBefore(moment().add(30, 'days')) && m.isBetween(hb, ha, 'minutes', '[]');
                                }
                            }
                        }
                    },
                    'Address.AddressLine1': {
                        validators: {
                            notEmpty: {
                                message: 'The field is required.'
                            },
                            stringLength: {
                                message: 'Max string length is 250.',
                                max: 250
                            }
                        }
                    },
                    'Address.AddressLine2': {
                        validators: {
                            stringLength: {
                                message: 'Max string length is 250.',
                                max: 250
                            }
                        }
                    },
                    'Address.AddressLine3': {
                        validators: {
                            stringLength: {
                                message: 'Max string length is 250.',
                                max: 250
                            }
                        }
                    },
                    'Address.AddressLine4': {
                        validators: {
                            stringLength: {
                                message: 'Max string length is 250.',
                                max: 250
                            }
                        }
                    },
                    'Address.AddressSuburb': {
                        validators: {
                            stringLength: {
                                message: 'Max string length is 50.',
                                max: 50
                            }
                        }
                    },
                    'Address.AddressCity': {
                        validators: {
                            notEmpty: {
                                message: 'The field is required.'
                            },
                            stringLength: {
                                message: 'Max string length is 50.',
                                max: 50
                            }
                        }
                    },
                    'Address.AddressPostalCode': {
                        validators: {
                            notEmpty: {
                                message: 'The field is required.'
                            },
                            stringLength: {
                                message: 'Max string length is 50.',
                                max: 50
                            }
                        }
                    }
                }
            })
    });

    $("#SelectedAddress").change(function () {
        $.ajax({
            url: '@Url.Action("GetAddressPartial", "ShoppingCart")',
            type: 'POST',
            data: {
                id: $("#SelectedAddress").val(),
            }
        }).done
            (function (data) {
                $('#AddressContainer').html(data);
                var validator = $('#saveForm').data('bootstrapValidator');
                validator.addField($('#Address_AddressLine1'));
                validator.addField($('#Address_AddressLine2'));
                validator.addField($('#Address_AddressLine3'));
                validator.addField($('#Address_AddressLine4'));
                validator.addField($('#Address_AddressCity'));
                validator.addField($('#Address_AddressSuburb'));
                validator.addField($('#Address_AddressPostalCode'));
            });
    });

</script>
